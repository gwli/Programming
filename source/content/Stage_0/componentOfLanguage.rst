编程语言的组成
==============

变量
----

从编码的脚度变量本质就是替换，一般变量赋值就是一次替换，指针类型变量的赋值是二次替换，动态语言经常会用到三次替换。但是大部分情况下，用不到三次以上替换，这也就是什么一般编程语言对二次以下替换支持很好。三次以上替换需要靠自己去实现了。（3这个数字是特殊的，俗话事不过三，这个是有原因的，根据一般人的思维能力的来的，就拿最简单的yes/no的逻辑判断来说，连续三次，就是八种情况，但是一般人思维能力同时关注最多九种情况，再多了人的思维就会混乱容易出错了，这也就是为什么，一般人下栱只看二三步的原因，很公司的编码规范会要求禁用或者少用三层以上if else/ for嵌套。并且学编程最头疼的内存管理也是三层管理,这样的例子到处都是不多举了）。

从物理的存储角度看：变量又为简单标量，复杂变量列表，哈希。再复杂一些树，栈，表等数据结构。一般的编程语言都对简单标量，复杂点的列表，哈希支持的很好。对于标量来说，常见的应用就是字符串的处理，与数值变量各种数学逻辑运算的。而对于树，栈，表都复杂的数据结构都自己去实现。并且数据量再大一些数据结构就需要专门的工具数据库来管理了。

流控与表达式
------------

程序代码的本质是思维与知识的固化。所以程序的结构是根据人的思维习惯来的。三种最基本结构：顺序，条件分支，循环。就拿人走路来说吧，人沿着路一直走到下，这就是顺序结构，走到一个交叉路口，要选择走哪条路，这个选择的过程就是条件分支。选好了路继续走前走，来到一个大山的脚下，然后顺着盘山公路，一圈一圈的往上走，这就是循环。每一种编程语言都对三种基本结构最具有很好的支持。但是每个领域都除了这些基本处理逻辑外，都会自己特殊的处理逻辑。人们对这些处理逻辑进行抽象建模，然后再根据模型，开发出来的相应的语言。例如perl对文本处理的优化，为了测试集成电路而开发出来tcl语言，针对集成电路中时序与状态转换处理逻辑，对于定时器与事件驱动的状态转换机制提供了很好的支持。数据库对大规模数据的集合运算，以及并发操作，原子操作都提供了很好的支持。Matlab对于大型数值计算支持与优化。以及coroutine机制支持的erlang与GO语言。当然随着技术发展，每门编程语言应用范围越来越广，同时随着人们的计算需求的发展，还会更多的语言被开发来应对这些新需求。

代码块的复用
------------
每一种语言都会提供代码复用的机制，邮最初的汇编语言的那些中断函数开始。到C语言等等函数的功能，以到C++,java等面向对象的机制。都是为了解决代码的复用性与易读性问题。我们编程与在框架设计的时候原则，对于功能比较小公用模块，例如一个计算公式就可以函数来实现。但是公用模块的复杂度提高，利用面向对象类的机制，对其实现比较适合。对于更加复杂的共用模块，但又不适合用函数与类实现，可以考虑用模板来实现，例如你会发现IDE工具生成各种各样样版代码，这就要元编程，你可以用lex/yacc来实现，可以利用scheme来实现。为了进一步提高提高代码灵活性，把数据与函数是不区分了，也就产生了函数式编程。对于代码动态调用：尤其是脚本语言，是灵活复用性，采用动态生成代码，直接运行。对于整个过程自动化，很有帮助，例如每一个脚本语言都会一个eval指令。基于不同的计算模型，编码的方式也是不一样的。
