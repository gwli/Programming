#############
DL 时代的编程
#############

*DL is eating software* [DLES]_  已经来临。 开发与测试的角色也开始起来变化。在传统软件时代，开发重于测试，需要大量的编程技巧。而测试对于能力的要求比较低。 在深度学习时代，传统的代码只是用来处理数据的预处理。同时有着大量的库的存在，而不需要太多的编程技能。 但是对于专业的要求，如何测试与训练模型是重点。而这个正是传统软件中测试的角色。

测试的核心那就是测试数据的设计。 原来的那些数据分类，边界值，极限值,默认值之类都用在DL数据的预处理上。DL时代编码主要是两块，数据的处理，然后网络的拓扑的设计。

并且随着的时间发展，DL 会把现在三十年来所有的software stack几乎会重塑一遍。


未来的编程基础
==============

#. 向量与各种维度的转换。

   - 面向对象的设计模式都被向量张量所取代。
   - 以后最常见的运算之一，那就是 向量/张量 dim 的reshape变换，然后就是矩阵乘了。array.reshape,stack/cat.
   - 以后也不用为各种变量命名而头疼了，都被转化成了下标值 1，2，3，4。。。
   - group,sum，降维   join升维。 

#. 矩阵乘，包含最重要的两种运算 加法与乘法。你要学会矩阵乘 用表示 各种模型关系。
   未来大部分的if,else 等等流控都会被 矩阵乘 + softmax 所取代。
#. 测度理论，各种度量的模型的发展，最基本的那与范数 概率论.
#. 可视化, 未来软件的最基本调试方法。 
#. 优化理论。

#. 函数的复用，未来就会变成计算流图+model参数集吧。

reference
=========

.. [DLES] https://petewarden.com/2017/11/13/deep-learning-is-eating-software/?utm_campaign=Revue%20newsletter&utm_medium=Newsletter&utm_source=Deep%20Learning%20Weekly

